# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtWidgets import QPushButton, QApplication, QMainWindow, QTextEdit, QTextBrowser, QRadioButton
from PyQt5 import uic
import sys
import numpy as np
sys.path.insert(1, './')
import FFT


class UI(QMainWindow):
    def __init__(self):
        super(UI, self).__init__()

        uic.loadUi("Ui\mainWindow.ui",self)

        #On charge tout nos composant
        self.inputMatrice = self.findChild(QTextEdit, "inputMatrice")
        self.textMatriceExemple = self.findChild(QTextBrowser, "textMatriceExemple")

        self.textResAlgo = self.findChild(QTextBrowser, "textResAlgo")
        self.textResNumpy = self.findChild(QTextBrowser, "textResNumpy")
        
        self.pbCalculer =  self.findChild(QPushButton, "pbCalculer")
        self.pbInverse = self.findChild(QPushButton, "pbInverse")

        self.rbMatriceExemple = self.findChild(QRadioButton, "rbMatriceExemple")
        self.rbInputMatrice = self.findChild(QRadioButton, "rbInputMatrice")
        self.rbBrutale = self.findChild(QRadioButton, "rbBrutale")
        self.rbRapide = self.findChild(QRadioButton, "rbRapide")

        #On initialise notre matrice exemple
        #C'est normal que ca marche pas car faut la mettre en string
        self.textMatriceExemple.setPlainText(np.array2string(FFT.Image1D))

        #On fait les signaux
        self.pbCalculer.clicked.connect(self.clickedpbCalculer)
        self.pbInverse.clicked.connect(self.clickedpbInverse)
        self.show()
    
    #Ne pas mettre de [] lors de la saisie de la matrice 
    def clickedpbCalculer(self):
        if self.rbMatriceExemple.isChecked()==True:

            MatriceExemple=np.fromstring(self.textMatriceExemple.toPlainText())
            self.textResNumpy.setPlainText(np.array2string(FFT.np.fft.fft(MatriceExemple)))

            if self.rbBrutale.isChecked()==True:
                self.textResAlgo.setPlainText(np.array2string(FFT.TF1D(MatriceExemple)))
            if self.rbRapide.isChecked()==True:
                self.textResAlgo.setPlainText(np.array2string(FFT.TF1R(MatriceExemple)))


        if self.rbInputMatrice.isChecked()==True:
            
            MatriceInput=np.fromstring(self.inputMatrice.toPlainText(), dtype=int, sep=' ')
            self.textResNumpy.setPlainText(np.array2string(FFT.np.fft.fft(MatriceInput)))

            if self.rbBrutale.isChecked()==True:
                self.textResAlgo.setPlainText(np.array2string(FFT.TF1D(MatriceInput)))
            if self.rbRapide.isChecked()==True:
                self.textResAlgo.setPlainText(np.array2string(FFT.TF1R(MatriceInput)))
            
    #Marche pas car ca prends en compte les caract√®re '[' et ']'
    def clickedpbInverse(self):
        MatriceTransforme=np.fromstring(self.textMatriceExemple.toPlainText(), dtype=complex, sep='j')
        self.textResNumpy.setPlainText(np.array2string(FFT.np.fft.ifft(MatriceTransforme)))

        if self.rbBrutale.isChecked()==True:
            self.textResAlgo.setPlainText(np.array2string(FFT.TFI1D(MatriceTransforme)))
        if self.rbRapide.isChecked()==True:
            self.textResAlgo.setPlainText(np.array2string(FFT.TFI1R(MatriceTransforme)))


app = QApplication(sys.argv)
UiWindow = UI()
app.exec_()